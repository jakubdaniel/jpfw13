\pdfminorversion=4

\documentclass{beamer}

%\usetheme[footlineauthor]{D3S}
\usetheme[event={JPF Workshop}]{D3S}
%\usetheme{D3S}

\usepackage{multirow}

\title{Predicate Abstraction in Java Pathfinder}
\author{Jakub Daniel, Pavel Parízek, Corina Păsăreanu}

\begin{document}
  \titleframe
  \note{\vbox to \vsize {\vfill\hbox to \hsize {\hfill This year's Google Summer of Code project \hfill} \vfill}}

  \begin{frame}{State Space Traversal}
    \note[item]{We are interested in verifying an absence of errors in a program}
    \begin{itemize}
      \item Concrete program state encodes
        \begin{itemize}
          \item Program counter
          \item Stack
          \item Heap
        \end{itemize}
      \item State space explosion
        \note[item]{Large domains, thread scheduling}
        \note[item]{Potentially infinite due to recursion and data domains}
    \end{itemize}
    \begin{center}
      \includegraphics{slides24}
    \end{center}
  \end{frame}

  \begin{frame}{Predicate Abstraction}
    \note[item]{\(\ldots\) is an approach dealing with the size of the statespace}
    \begin{itemize}
      \item Finite set of predicates over program variables \(\rightarrow\) finite state space
        \note[item]{The idea is to restrain to finite state space}
        \note[item]{Abstraction maps sets of original states to new abstract states}
      \item State space reduction
    \end{itemize}
    \begin{center}
      \includegraphics{slides1}
    \end{center}
  \end{frame}

%  \begin{frame}{Predicate Abstraction}
%    \begin{columns}[c]
%      \begin{column}{0.3\textwidth}
%        \includegraphics[width=\textwidth,keepaspectratio]{slides3}
%      \end{column}
%      \begin{column}{0.7\textwidth}
%         \begin{itemize}
%           \item Dynamic state space exploration
%             \begin{itemize}
%               \item Modeling effects of instructions on a program state
%             \end{itemize}
%           \item Counterexample
%             \begin{itemize}
%               \item Feasible witness
%               \item Infeasible spurious error
%             \end{itemize}
%           \item Refinement
%             \begin{itemize}
%               \item Lazy abstraction
%             \end{itemize}
%         \end{itemize}
%      \end{column}
%    \end{columns}
%  \end{frame}

  \begin{frame}{Project Goals}
    \note[item]{The main goal of the project was to design and implement \(\ldots\)}
    \note[item]{\(\ldots\) where Java Pathfinder is a verification tool. Basically it is \(\ldots\)}
    \begin{itemize}
      \item Predicate abstraction for Java Pathfinder
      \item Java Pathfinder
        \begin{itemize}
          \item Custom Java Virtual Machine
          \item Model checking tool for Java
          \item Interprets concrete bytecode instructions
          \item Dynamically explores program state space
            \begin{itemize}
              \item Modeling effects of instructions on a program state
            \end{itemize}
        \end{itemize}
    \end{itemize}
  \end{frame}

  \begin{frame}{Challenges}
    \note[item]{We have identified several challenges, namely \(\ldots\)}
    \begin{itemize}
      \item Predicate language
      \item Symbolic bytecode interpretation
      \item Predicate value inference
        \begin{itemize}
          \item Assignments
          \item Method call boundaries
        \end{itemize}
    \end{itemize}
  \end{frame}

  \subtitleframe{Predicate Language}

  \begin{frame}{Predicate Language}
    \begin{columns}[c]
      \begin{column}{0.5\textwidth}
        \begin{itemize}
          \item {\tt =, <, >, <=, >=}
            \note[item]{For us predicates are always equalities and inequalities \(\ldots\)}
          \item {\tt +, -, *, /}
            \note[item]{\(\ldots\) of basic arithmetic expressions over variables and \(\ldots\)}
            \note[item]{instance fields, static fields, array elements, and lengths of arrays.}
            \note[item]{For that our predicate language defines uninterpreted functions with intuitive semantics.}
          \item {\tt fread(f, o)}
          \item {\tt sfread(f, c)}
          \item {\tt aread(arr, a, expr)}
          \item {\tt alength(arrlen, a)}
          %\item {\tt return}
        \end{itemize}
      \end{column}
      \begin{column}{0.5\textwidth}
        \scalebox{0.6}{
          \lstinputlisting[morekeywords={fread,sfread,aread,arr,alength,arrlen},linewidth=8.5cm,escapechar=`]{language.pred}
        }
      \end{column}
    \end{columns}
    %\begin{center}
    %  {\small\color{gray} There is a Java-like alternative notation}
    %\end{center}
  \end{frame}

  \subtitleframe{Symbolic Execution}
  \note{\vbox to \vsize {\vfill \hbox to \hsize {\hfill \vbox{To be able to identify effects of the program statements on the predicates forming the abstraction, we need to perform a symbolic execution \(\ldots\)} \hfill} \vfill}}

  \begin{frame}{Symbolic Execution}
    Suppose a predicate {\tt c = 3}\\
    \begin{center}
      \vbox to 1.5cm{
        \vfill
        \uncover<6>{
          \Large\tt c = 3 \(\Leftrightarrow\) a + b = 3
          \note<6>[item]{To illustrate the information we obtain from symbolic execution \(\ldots\)}
        }
        \vfill
      }
    \end{center}
    \begin{columns}[c]
      \begin{column}{\dimexpr 0.5\textwidth - 0.5cm\relax}
        \vbox{
          \small\tt
          {\color<1>{gray}   load b } \\
          {\color<1-2>{gray} load a } \\
          {\color<1-3>{gray} add    } \\
          {\color<1-4>{gray} store c}
        }
      \end{column}
      \begin{column}{\dimexpr 0.5\textwidth - 0.5cm\relax}
        \begin{center}
          \includegraphics<1,5-6>{slides5}
          \includegraphics<2>{slides6}
          \includegraphics<3>{slides7}
          \includegraphics<4>{slides8}
        \end{center}
      \end{column}
    \end{columns}
  \end{frame}

  \subtitleframe{Predicate Value Inference}

  \begin{frame}{Affected Predicates -- Symbol Aliasing}
    \note[item]{Suppose the statement on the right, which of the predicates on the left may need updating? Hard to decide without additional information}
    \begin{itemize}
      \item Detecting impact of bytecode instructions
        \vbox{
          \uncover<2>{
            \note<2>[item]{Suppose the statement followed after this portion of code}
            \note<2>[item]{The symbolic access paths in all the predicates refer in fact to the same piece of data \(\rightarrow\) all predicates are affected}
            \note<2>[item]{Therefore we maintain this graph - memory model}
            \vspace{0.25cm}
            \begin{columns}[T]
              \begin{column}{0.5\textwidth}
                \includegraphics[width=\textwidth,keepaspectratio]{slides2}
              \end{column}
              \begin{column}{0.5\textwidth}
                \lstinputlisting[language=Java]{alias2.java}
              \end{column}
            \end{columns}
          }
          \begin{columns}[T]
            \begin{column}{0.5\linewidth}
              \begin{block}{Predicates}
                \lstinputlisting{alias.pred}
              \end{block}
            \end{column}
            \begin{column}{0.5\linewidth}
              \begin{block}{Statement}
                \lstinputlisting[language=Java]{alias1.java}
              \end{block}
            \end{column}
          \end{columns}
        }
    \end{itemize}
  \end{frame}

  \begin{frame}{Affected Predicates -- Symbol Aliasing -- Arrays}
    \note[item]{But maintaining the graph over all statements is tricky - mainly due to arrays}
    \note[item]{Suppose we want to update the graph after the statement}
    \note[item]{We do not know the exact value of the index}
    \note[item]<2>{\(\ldots\) so we need to overapproximate}
    \begin{columns}[c]
      \begin{column}{\dimexpr 0.3\textwidth - 0.3em\relax}
        \begin{block}{Statement}
          \lstinputlisting[language=Java]{alias3.java}
        \end{block}
      \end{column}
      \begin{column}{\dimexpr 0.7\textwidth - 0.7em\relax}
        \begin{itemize}
          \item What array element is selected?
            \begin{itemize}
              \item {\tt i} is a symbolic variable
            \end{itemize}
        \end{itemize}
      \end{column}
    \end{columns}
    \begin{center}
      \includegraphics<1>{slides9}
      \includegraphics<2>{slides10}
    \end{center}
  \end{frame}
 
  \begin{frame}{Affected Predicates}
    \note[item]{Now we would like to lift the notion of affected symbols to predicates, to detect what needs to be updated}
    \note[item]{To be precise we need to decide exactly what predicates are outdated}
    \note[item]{Due to overapproximating the aliasing relation we cannot miss any outdated symbol, but we may consider some symbols overwritten even though they are not}
    \note[item]{All predicates that do not contain such symbols do not need reevaluation}
    \begin{itemize}
      \itemsep=1em
      \item Ideal: predicates referring to old concrete values
        \begin{itemize}
          \item Hard to get (aliasing, arrays)
        \end{itemize}
      \item Solution: occurrence of potentially overwritten variables
        \begin{itemize}
          \item Overapproximation due to aliasing
        \end{itemize}
      \item Other predicates keep their value
        %\begin{itemize}
        %  \item
        %\end{itemize}
    \end{itemize}
  \end{frame}

  \begin{frame}{Predicate Value Inference}
    \note[item]{After selecting predicates that need to be updated we invoke the valuation process itself}
    \begin{itemize}
      \item Using {\bf S}atisfiability {\bf M}odulo {\bf T}heory solver (SMT)
        \note[item]{It is based on a call to an SMT with support for array theory that our field and element access are modeled on top of}
        \begin{center}
          {\tt
            \begin{tabular}{p{1cm}cp{0.5cm}lcp{0.5cm}l}
              $\text{a = b}$ & $\wedge$ & $\underbrace{\text{a.x}}$ & $\text{ = 1}$ & $\wedge$ & $\underbrace{\text{b.x}}$ & $\text{ = 2}$ \\
                             &          & \multicolumn{4}{c}{\tiny\sf Expressions in theory of arrays}                                     \\
            \end{tabular}
          }
        \end{center}
      \item Distinguished predicate values:
        \note[item]{Each predicate is assigned a truth value, either true if it necessarily holds after the given statement, false if it neessarily does not hold, unknown in cases when both possibilities may apply}
        \begin{itemize}
          \item {\tt true}
          \item {\tt false}
          \item {\tt unknown}
        \end{itemize}
      \item Predicate values determined using \emph{weakest preconditions}
        \note[item]{To infer the valuation we use the approach of weakest preconditions}
    \end{itemize}
  \end{frame}

  \begin{frame}{Weakest Preconditions}
    \note<1>[item]{Weakest precondition for a predicate and a statement is a formula that needs to necessarily hold before the statement is executed in order to ensure that the predicate will hold after the statement is executed}
    \begin{itemize}
      \item Applied to cope with statements modifying data
      \item Recursive construction
        \note<1>[item]{The construction of the weakest precondition starts with the original predicate and attempts to derive the final formula depending on the predicate structure and type of the statement}
        \begin{columns}[T]
          \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
            \begin{block}{Predicate}
              \note<1>[item]{Here I will present an example. Let's start with a predicate given in our language and its parse tree}
              {\tt \only<1>{\color{gray}}x{\only<2>{\color{gray}}.f{\only<3>{\color{gray}}[0]{\only<4>{\color{gray}}.num{\only<5>{\color{gray}}{\only<6-7>{\color{gray}}\;=\;}y{\only<6>{\color{gray}}.num}}}}}}
            \end{block}
          \end{column}
          \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
            \begin{block}{Statement}
              \note<8>[item]{Now I will illustrate what the weakest precondition will look like for a specific statement}
              {\only<1-8>{\color{gray}} \lstinline|x.f[i] = y;|}
            \end{block}
          \end{column}
        \end{columns}
    \end{itemize}
    \begin{center}
      \vbox{
        \invisible{\includegraphics<1>[height=4cm,keepaspectratio]{slides11}} % Reserve space
        \includegraphics<2>  [height=4cm,keepaspectratio]{slides11}
        \includegraphics<3>  [height=4cm,keepaspectratio]{slides12}
        \includegraphics<4>  [height=4cm,keepaspectratio]{slides13}
        \includegraphics<5>  [height=4cm,keepaspectratio]{slides14}
        \includegraphics<6>  [height=4cm,keepaspectratio]{slides15}
        \includegraphics<7>  [height=4cm,keepaspectratio]{slides16}
        \includegraphics<8-9>[height=4cm,keepaspectratio]{slides17}
        \includegraphics<10->[height=4cm,keepaspectratio]{slides18}
        \note<10->[item]{We can see, that the array element read has been adjusted to encode the effects of the assignment statement}
        \note<10->[item]{The underlaying theorem prover can leverage the added information to decide the truth value of the predicate after the statement}
      }
      %\visible<11->{\tt \(\text{i = 0} \Rightarrow \text{x.f[0].num = y.num}\)}
    \end{center}
  \end{frame}

  \begin{frame}{Determining Predicates}
    \note[item]<1>{Now that we have the weakest precondition, we need to decide whether the precondition holds in the current state}
    \note[item]<1>{A naïve and most straightforward way would be to leverage all predicates in the current state}
    \note[item]<1>{Most of the predicates may be unimportant for a particular valuation query}
    \begin{itemize}
      \item Set of predicates affecting valuation of a given predicate
        \begin{itemize}
          %\item Restrict models of given predicate
          \item Overapproximated by shared symbols (e.g. {\tt x.f[0]})
          \note<1>[item]{The filtered set of predicates is potentially smaller and may lead to less time being spent in the theorem prover}
        \end{itemize}
        \vspace{1em}
        \begin{enumerate}
          \item Transitive closure construction
            \begin{itemize}
              \item e.g. {\tt \begin{tabular}{ccccc}a \(\overset{\text{?}}{\text{=}}\) 3 & \(\leadsto\) & a = b & \(\leadsto\) & b = 3 \end{tabular}}
            \end{itemize}
          \item Consider predicate or negation depending on current valuation
            \begin{itemize}
              \note<2>[item]{The complete predicate valuation query then considers positive and negative forms of individual determining predicates and tests whether it infers validity of the weakest precondition, for which we know that it implies the validity of the original predicate after the statement}
              \item e.g. {\tt (a = b) \(\wedge\) \(\neg\)(b = 3)\only<2>{ \(\Rightarrow\) \(\neg\)(a = 3)}}
            \end{itemize}
        \end{enumerate}
    \end{itemize}
  \end{frame}

  \begin{frame}{Method Call Boundaries}
    \note[item]{Apart from assignment statements, the predicate values depend on scope changes caused by calling and returning from methods}
    \begin{columns}[T]
      \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
        \begin{itemize}
          \itemindent=-2em
          \item Arguments of reference type
          \item Static fields
        \end{itemize}
      \end{column}
      \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
        \begin{itemize}
          \itemindent=-2em
          \item Different local variables
          \item Return values
        \end{itemize}
      \end{column}
    \end{columns}
    \vspace{2em}
    \begin{columns}[T]
      \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
        \lstinputlisting[basicstyle=\tiny\tt,language=Java]{method1.java}
      \end{column}
      \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
        \lstinputlisting[basicstyle=\tiny\tt,morekeywords={fread,sfread,aread,arr,alength,arrlen},escapechar=`]{method1.pred}
      \end{column}
    \end{columns}
    \vspace{0.0625cm}
    {\color{gray!25} \hrule}
    \vspace{0.25cm}
    \begin{columns}[T]
      \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
        \lstinputlisting[basicstyle=\tiny\tt,language=Java]{method2.java}
      \end{column}
      \begin{column}{\dimexpr 0.5\textwidth - 1cm\relax}
        \lstinputlisting[basicstyle=\tiny\tt,morekeywords={fread,sfread,aread,arr,alength,arrlen}]{method2.pred}
      \end{column}
    \end{columns}
  \end{frame}

  \subtitleframe{Implementation}

  \begin{frame}{Implementation}
    \note[item]{During the project we implemented all the necessary mechanisms to support predicate abstraction in JPF via an extension}
    \begin{itemize}
      \item Bytecode factory
        \note[item]{We used a custom bytecode factory and overridden instructions to perform the symbolic execution with individual symbols passed in JPF attributes}
      \item Attributes
        \begin{itemize}
          \item Symbolic values
        \end{itemize}
      \item Listeners
        \begin{itemize}
          \item Backtracking
        \end{itemize}
        \note[item]{The rest of the infrastructure is being notified about important events by listeners (e.g. backtracking)}
      \item \url{https://bitbucket.org/jd823592/jpf-abstraction}
        \note[item]{In case of interest, the code is accessible from its repository referred to by the URL}
    \end{itemize}
  \end{frame}

  \begin{frame}{Branching -- Non-determinism}
    \note[item]{Now I would like briefly mention how we dealt with non-determinism upon branching}
    \begin{itemize}
      \itemsep=2em
      \item Control-flow determined by SMT based on known truth values
        \begin{center}
          \begin{minipage}{6.5cm}
            \lstinputlisting[language=Java]{branching.java}
          \end{minipage}
          \vspace{1em}
          \includegraphics{slides4}
        \end{center}
      \item Learning branching condition predicate
        \begin{itemize}
          \item Improves precision
        \end{itemize}
    \end{itemize}
  \end{frame}

  \begin{frame}{Future Work}
    \note[item]{To conclude \(\ldots\)}
    \begin{itemize}
      \item State matching
        \begin{itemize}
          \item Equal program counters
          \item Abstract subsumption
            %\begin{itemize}
            %  \item \(\text{s}_\text{j} \le \text{s}_\text{i} \Leftrightarrow \text{"}\text{s}_\text{j} \rightarrow \text{s}_\text{i}\text{"}\) \\
            %  \item e.g.
            %    \begin{itemize}
            %      \item ({\tt a = 1}) \(\le\) ({\tt a > 0})
            %      \item ({\tt a = 1}) \(\le\) ({\tt a \(\text{=}^\text{\tiny unknown}\) 1}) 
            %    \end{itemize}
            %\end{itemize}
        \end{itemize}
      \item Predicate learning
        \begin{itemize}
          \item Current state
            \begin{itemize}
              \item User-defined predicates
              \item Branching conditions
            \end{itemize}
          \item {\bf C}ounter{\bf e}xample-{\bf G}uided {\bf A}bstraction {\bf R}efinement (CEGAR)
            \begin{itemize}
              \item Error trace analysis
              \item Heuristics backed by experiments
            \end{itemize}
          \item Static analysis
        \end{itemize}
    \end{itemize}
    %\invisible{\includegraphics<1>[height=6cm,keepaspectratio]{slides19}} % reserve space
    %\includegraphics<2>[height=6cm,keepaspectratio]{slides19}
    %\includegraphics<3>[height=6cm,keepaspectratio]{slides20}
    %\includegraphics<4>[height=6cm,keepaspectratio]{slides21}
    %\includegraphics<5>[height=6cm,keepaspectratio]{slides22}
    %\includegraphics<6>[height=6cm,keepaspectratio]{slides23}
  \end{frame}
\end{document}
